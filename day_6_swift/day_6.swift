import Foundation

let input = """
    ..................#................................................................#........#.....................................
    ...#...........#...................................................#........................................#.................#...
    ...................................#................#.#...............#.................................................#.........
    .....#......#................#.....................................................................#..........#........#......#...
    ............................................................................................#.....................#...............
    .....................#..##...#........................#.................#.......................#..#.........#.......#...#......#.
    ............##....................................##..................#...............................#....#......................
    .............#............#.#..#.......#...........#..............#...............#.....#.........................................
    ....................#..........##.........#.........#................#............................................................
    ....#.......#................................................................#...#.#..........................................#.#.
    ..#..............#.....................................#..........#.#....#..............#..................#.#............#.......
    .#.......#.........................#........................#..#.....#............................................................
    ........#...#......................#...........#......................................#....................#......................
    .............................#..............#........##....#....................#......#....................#............#......#.
    ..............#..............#............#.......................##....#..........................................#.........#....
    .............#............#..........#..........#...#.....................................................#.......................
    ..#........#.....#..........................................#................................................#...#.#...#..........
    ........#.....................#...#..#......#.........................................................#.....##.........#..........
    ..............................................................................................#...#...............................
    ..#.......................#..........................#......#...................................................................#.
    .......#.........................#..............#.........#.............#.......................................#...#.............
    ..................#.................#.......................#....................#....................................#...........
    ...#...#.......#......##.#...............#....#..............#..........................................#....#..#.................
    #................................#.......#.....#.......#.............#..................#........#................................
    ...........#..................................#.......................................................................#.#..#......
    .......#........#.........................................#..........................#...........................#.....#..........
    ................#..#.....................#..#...........................#...........................................#.............
    #...#.......................#................................................#................#................................#..
    ..........#...........................#.......#............................................................................#.....#
    ..................................#............................................................#..................................
    ......................#........#.............#....#.....#.......#..........................#..........................#...........
    ...........................##.................#.............#........................#...#..................#.....................
    .............................................................................................................#....#..........#....
    ................#...................................#...........#..........#....................#............................#....
    ........#....#................................................#................##..#..................................#...........
    ...........#....................................................#...#.#......#....................................................
    .......................#.........................................................^....................................#...........
    ..........................#.............##..#........#.#....#.......#....................#...........#.........#.....#............
    ........#...........................#..#..........................................................#...............................
    ....#....................................#....#.........................................#.........#...............................
    ...............#...................................#.....#.................................#....................................#.
    ......#...............................................................#.............................#........................#....
    .........................#.....#.........................#.#...............#.........#.....#..................#..#.........#......
    .........................................................#......#........##.......................#...#......#................#...
    .......................................#.....#.................................#..................................................
    ..................#..................................#..........................................................................#.
    ...................#....#.........#.......#................#....................#.........................#......#.....#..#.......
    ................................#..............................................................................#....#.............
    .....................#.#.............#.................#..........#.......#.........................................#.............
    ......#....................#....................................................................#...#.............................
    ........#........#...........#.##.............#........................#............#..............#.........#....#........#......
    ........................#.................................................................#.......................................
    ............................................................#.....#....................#............#.....#....#............#.....
    ...........#............#....#........................................................##............#..............#..............
    ...........#...........#.....#..............#..............##....#........#......#................................................
    ..#................................................................................#......................#......#................
    ....................#.........#......................#.............................#.......#.......................#.............#
    ..#...#....#......................................................................................................#...............
    ...........#................................................................................#...............................#.....
    ....................................#............#..........#.........................#..................................#.......#
    ...................#......#...................#............#......#........#................#.............#...........#.........#.
    ........................#..................................#........#..................#..........................................
    ............#..#...........#..................##....................#...........................................#.................
    .......................................................................................#.....#............#.......................
    ...............................................#....#................................#..#..........................#..#...........
    ..............#..#.....#.........#....................#.......#..#..............#...............................#.....#...........
    ..........#............................#..........................................................................................
    ........................................#........#........................................................#.#.....................
    #................#......................#..................................................................................#......
    ...............................................................................#................................#.................
    ...................................................................................................................#.#........#...
    #........................................................................#......................................#.#...............
    ...#......#............#...................#.............#........#..........................................#......#.............
    ..............##....#...................................................#......................#..................................
    ...............#........................................................................#...........#...#.#.......................
    ..........#.#.....#................................#...........#........#.......#.................................................
    #....................#......................................................................................#.....................
    ..............#...##...........................................#.............#.......#..................#..............#..........
    .#.............................................#..............................................................................#...
    ...#................................#............................................#............................#...................
    ..............................#......................................................#..........................................#.
    ...................#.....................................#..................................#......#..............................
    ....#.#..........##.............#.......#........................##..........#.................#..................................
    #..#................#........##....................................................................................#..............
    ........#...#.........................................................................#...........................................
    ......................................................#....#...................#..#.................................#.............
    ........#...............#........#..............................................#............................#....................
    ...#..............................#.........................................##.......................................#....#.......
    ...#................#..............#.......#......................................................................................
    ........#..................#.............................................................#...........................#....#.......
    ......................#.#..........#.......#..................................#..#...#............#...............#...............
    .....#..................#....#..#......#.......................#.....................................................#............
    .....#................................#.........................#..................#.#..........#...#............#.....#..........
    ....#...................#....#.#.........#........#..................................................................#....#..#....
    ........#...............#......................................#........#..............................#..........................
    ....#...#.#.....#..............#..................#..........#...#..#......................#...#..........#......................#
    ...........#...................................................................................................#................#.
    .................................##..............#.............................#...............................#..................
    ...........#.................#.............##...................................#.......................#.................##......
    .....#..................#......#........#.................................................#..#........................#..#........
    ......#.......#......................................................................#.#.........#....#...........................
    ..................#.#........................#......#................................................................#......#.....
    .....................#............#...................#.....#....................................#.......#..........#.......#.....
    #.............................#...............................#...#...............................................................
    ..##.........#........#......................................#.....................#...#.............#............#..#............
    ..........#.....................#..#....................#...#....................#....................#.....................#.....
    ...........#..........#...............#..#..........#..............................................#.#............................
    ............#...#...#.............#.........#.............................#...............#.......................................
    .........#...........#...............................................................#............................................
    .#..#.................................................................#............#.#.......................##...................
    ........##............#...................#................................#......................................................
    ............................................#..........................#..........................................................
    #...................#...........#..............#...#............#.#........#.................#......#.............................
    ........#....................................#....................................................................................
    ...........#.........#..#...............#...........#.....##.#......#....##............#....#....#.#.........##.........#.........
    ..#......................#..........#.................#.................#......#.............................#........#...........
    ....................#.................#....#..............................#....#.............#....#....#.....................#....
    ............#.................#.................................#...............................#..#...........................#..
    ...................................................#.....#..............#.......#....................#.#..........................
    ..#.........##..#........#...................................................................................#............#.......
    .....#..............................#......................................................................#........#.............
    ................................#........##.......#...............#..............#.......#...#.#........#.........................
    ..............................#.....................#.........................................#..................................#
    ...........#...................##.................#.................................#...............................#........#....
    ..............................#...##......#..................#...#................................#......#.......#...............#
    .....................##......#......#.#.......#..............#......#.................#.........#...................#.............
    ..........................#................................#...........#..........................................................
    ...#.....#....................#.....................#...#.....#.............................#.#....#.....#.#.................#....
    ............................#...#........#......................................................................#.....#...........
    ............#..........##..................#.............................................................#.....#..#...............
    """

class GuardTracker {

    struct Point: Hashable {
        let x: Int
        let y: Int

        static func == (lhs: Point, rhs: Point) -> Bool {
            return lhs.x == rhs.x && lhs.y == rhs.y
        }

        public func hash(into hasher: inout Hasher) {
            hasher.combine(x)
            hasher.combine(y)
        }
    }

    let mapString: String
    let mapArray: [[String]]

    enum TravelDirection {
        case up
        case down
        case left
        case right

        func movement() -> Point {
            switch self {
            case .up:
                return Point(x: -1, y: 0)
            case .down:
                return Point(x: 1, y: 0)
            case .left:
                return Point(x: 0, y: -1)
            case .right:
                return Point(x: 0, y: 1)
            }
        }

        func nextDirection() -> TravelDirection {
            switch self {
            case .up:
                return .right
            case .right:
                return .down
            case .down:
                return .left
            case .left:
                return .up
            }
        }
    }

    enum MoveResult {
        case canMove
        case obstruction
        case offScreen
    }

    var startingPoint = Point(x: 0, y: 0)

    init(map: String) {
        self.mapString = map
        self.mapArray = mapString.split(separator: "\n").map({ Array($0).map({ String($0) }) })

        for (entryNum, line) in mapArray.enumerated() {
            if let index = line.firstIndex(of: "^") {
                startingPoint = Point(x: entryNum, y: index)
                break
            }
        }

    }

    func getUniquePointsVisted() -> Int {
        let currentPosition = self.startingPoint
        var pointsVisited = [startingPoint]

        pointsVisited.append(contentsOf: move(startingFrom: currentPosition, moving: .up))

        return Set(pointsVisited).count
    }

    func move(startingFrom from: Point, moving direction: TravelDirection) -> [Point] {
        var visited = [from]

        var position = from
        var movingDirection = direction

        var nextX = position.x + direction.movement().x
        var nextY = position.y + direction.movement().y

        while canMoveTo(point: Point(x: nextX, y: nextY)) != .offScreen {

            // If we can move there, move there
            if canMoveTo(point: Point(x: nextX, y: nextY)) == .canMove {
                position = Point(x: nextX, y: nextY)
                nextX = position.x + movingDirection.movement().x
                nextY = position.y + movingDirection.movement().y
                visited.append(position)
                continue
            }

            // If we cannot move there then we hit an obstruction
            while canMoveTo(point: Point(x: nextX, y: nextY)) == .obstruction {
                movingDirection = movingDirection.nextDirection()
                nextX = position.x + movingDirection.movement().x
                nextY = position.y + movingDirection.movement().y
            }

        }

        return visited
    }

    func getLoopObstructionPositions() -> [Point] {
        var obstructionPositions = [Point]()

        for x in 0..<mapArray.count {
            for y in 0..<mapArray[x].count {
                let currentPoint = Point(x: x, y: y)

                // Skip invalid positions: walls (#), starting position (^), or already occupied positions
                if mapArray[x][y] == "#" || currentPoint == startingPoint {
                    continue
                }

                // Simulate adding obstruction and check for loops
                if createsLoopWithObstruction(at: currentPoint) {
                    obstructionPositions.append(currentPoint)
                }
            }
        }

        return obstructionPositions
    }

    func createsLoopWithObstruction(at obstructionPoint: Point) -> Bool {
        var visited = Set<Point>()
        var currentPosition = startingPoint
        var direction = TravelDirection.up

        while true {
            if visited.contains(currentPosition) {
                // Loop detected: guard revisits a position other than the starting point
                print(
                    "Loop detected with obstruction at: \(obstructionPoint), revisited: \(currentPosition)"
                )
                return true
            }

            visited.insert(currentPosition)

            let nextX = currentPosition.x + direction.movement().x
            let nextY = currentPosition.y + direction.movement().y
            let nextPoint = Point(x: nextX, y: nextY)

            // Check movement considering the obstruction
            let moveResult = canMoveTo(point: nextPoint, withObstruction: obstructionPoint)

            switch moveResult {
            case .canMove:
                currentPosition = nextPoint
            case .obstruction:
                direction = direction.nextDirection()
            case .offScreen:
                // Guard escapes the map: no loop
                print("No loop: guard escaped the map with obstruction at: \(obstructionPoint)")
                return false
            }
        }
    }

    func canMoveTo(point: Point, withObstruction obstructionPoint: Point) -> MoveResult {
        if point == obstructionPoint {
            return .obstruction
        }
        return canMoveTo(point: point)
    }

    func canMoveTo(point: Point) -> MoveResult {
        if isOffScreen(point: point) {
            return .offScreen
        }

        let xCoord = point.x
        let yCoord = point.y

        return mapArray[xCoord][yCoord] != "#" ? .canMove : .obstruction
    }

    func isOffScreen(point: Point) -> Bool {
        let mapHeight = mapArray.count
        let mapWidth = mapArray.first!.count

        let xCoord = Int(point.x)
        let yCoord = Int(point.y)

        if xCoord < 0 || xCoord > mapHeight - 1 || yCoord < 0 || yCoord > mapWidth - 1 {
            return true
        }

        return false
    }

}

let tracker = GuardTracker(map: input)
let uniquePointsVisited = tracker.getUniquePointsVisted()
print("Unique Points Visited: \(uniquePointsVisited)")

let obstructionPositions = tracker.getLoopObstructionPositions()
print("Obstruction positions: \(obstructionPositions)")
print("Number of valid obstruction positions: \(obstructionPositions.count)")
